---
AWSTemplateFormatVersion: 2010-09-09
Conditions:
  GovCloudCondition:
    - "AWS::Region"
    - us-gov-west-1
Description: " WebServer, NGINX in ASG behind ALB"
Mappings:
  AWSAMIRegionMap:
    AMI:
      US1604HVM: ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20180405
    ap-northeast-1:
      US1604HVM: ami-60a4b21c
    ap-northeast-2:
      US1604HVM: ami-633d920d
    ap-south-1:
      US1604HVM: ami-dba580b4
    ap-southeast-1:
      US1604HVM: ami-82c9ecfe
    ap-southeast-2:
      US1604HVM: ami-2b12dc49
    ca-central-1:
      US1604HVM: ami-9d7afcf9
    eu-central-1:
      US1604HVM: ami-cd491726
    eu-west-1:
      US1604HVM: ami-74e6b80d
    eu-west-2:
      US1604HVM: ami-506e8f37
    sa-east-1:
      US1604HVM: ami-5782d43b
    us-east-1:
      US1604HVM: ami-6dfe5010
    us-east-2:
      US1604HVM: ami-e82a1a8d
    us-west-1:
      US1604HVM: ami-493f2f29
    us-west-2:
      US1604HVM: ami-ca89eeb2
Outputs:
  URL:
    Description: "The URL of WebServer"
    Value:
      - ""
      -
        - "http://"
        -
          - ApplicationLoadBalancer
          - DNSName
Parameters:
  EmailAddress:
    AllowedPattern: "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)"
    ConstraintDescription: "Must be a valid email id."
    Description: "Email Address for notification"
    Type: String
  InstanceType:
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
    ConstraintDescription: "must be a valid EC2 instance type."
    Default: t2.medium
    Description: "EC2 instance type"
    Type: String
  KeyPairName:
    ConstraintDescription: "Name of an existing EC2 KeyPair."
    Type: "AWS::EC2::KeyPair::KeyName"
  PrivateSubnet1ID:
    Description: "Private Subnet Id 1"
    Type: "AWS::EC2::Subnet::Id"
  PrivateSubnet2ID:
    Description: "Private Subnet Id 2"
    Type: "AWS::EC2::Subnet::Id"
  PublicSubnet1ID:
    Description: "Public Subnet Id 1"
    Type: "AWS::EC2::Subnet::Id"
  PublicSubnet2ID:
    Description: "Public Subnet Id 2"
    Type: "AWS::EC2::Subnet::Id"
  QSS3BucketName:
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
    ConstraintDescription: "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
    Default: aws-quickstart
    Description: "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: "^[0-9a-zA-Z-/]*$"
    ConstraintDescription: "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/)."
    Default: implementing/
    Description: "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/)."
    Type: String
  RemoteAccessCIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
    ConstraintDescription: "CIDR block parameter must be in the form x.x.x.x/x"
    Description: "Allowed CIDR block for external SSH access"
    Type: String
  VPCCIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
    ConstraintDescription: "Must be a valid IP range in x.x.x.x/x notation"
    Description: "The CIDR IP range of VPC"
    Type: String
  VPCID:
    Description: "ID of the VPC (e.g., vpc-0343606e)"
    Type: "AWS::EC2::VPC::Id"
  WebserverCIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
    ConstraintDescription: "CIDR block parameter must be in the form x.x.x.x/x"
    Description: "Allowed CIDR block for  webserver access"
    Type: String
Resources:
  ALBListener:
    Properties:
      DefaultActions:
        -
          TargetGroupArn: ALBTargetGroup
          Type: forward
      LoadBalancerArn: ApplicationLoadBalancer
      Port: "80"
      Protocol: HTTP
    Type: "AWS::ElasticLoadBalancingV2::Listener"
  ALBTargetGroup:
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: VPCID
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
  ApplicationLoadBalancer:
    Properties:
      SecurityGroups:
        - WebServerSecurityGroup
      Subnets:
        - PublicSubnet1ID
        - PublicSubnet2ID
      Tags:
        -
          Key: name
          Value: " WebServer ASG Instance"
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
  NotificationTopic:
    Properties:
      Subscription:
        -
          Endpoint: EmailAddress
          Protocol: email
    Type: "AWS::SNS::Topic"
  WebServerCPUAlarmHigh:
    Properties:
      AlarmActions:
        - WebServerScaleUpPolicy
      AlarmDescription: "Scale-up if CPU > 90% for 10 minutes"
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        -
          Name: AutoScalingGroupName
          Value: WebServerGroup
      EvaluationPeriods: "2"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: "300"
      Statistic: Average
      Threshold: "90"
    Type: "AWS::CloudWatch::Alarm"
  WebServerCPUAlarmLow:
    Properties:
      AlarmActions:
        - WebServerScaleDownPolicy
      AlarmDescription: "Scale-down if CPU < 70% for 10 minutes"
      ComparisonOperator: LessThanThreshold
      Dimensions:
        -
          Name: AutoScalingGroupName
          Value: WebServerGroup
      EvaluationPeriods: "2"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: "300"
      Statistic: Average
      Threshold: "70"
    Type: "AWS::CloudWatch::Alarm"
  WebServerGroup:
    CreationPolicy:
      ResourceSignal:
        Count: "1"
        Timeout: PT15M
    Properties:
      LaunchConfigurationName: WebServerLaunchConfig
      MaxSize: "8"
      MinSize: "2"
      NotificationConfiguration:
        NotificationTypes:
          - "autoscaling:EC2_INSTANCE_LAUNCH"
          - "autoscaling:EC2_INSTANCE_LAUNCH_ERROR"
          - "autoscaling:EC2_INSTANCE_TERMINATE"
          - "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
        TopicARN: NotificationTopic
      TargetGroupARNs:
        - ALBTargetGroup
      VPCZoneIdentifier:
        - PublicSubnet1ID
        - PublicSubnet2ID
    Type: "AWS::AutoScaling::AutoScalingGroup"
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: "1"
        MinInstancesInService: "1"
        PauseTime: PT15M
        WaitOnResourceSignals: "true"
  WebServerLaunchConfig:
    Metadata:
      ? "AWS::CloudFormation::Init"
      :
        config-webserver:
          files:
            /var/tmp/nginx.conf:
              group: root
              mode: "000664"
              owner: root
              source:
                - "https://s3.amazonaws.com/${QSS3BucketName}/${QSS3KeyPrefix}scripts/ngnix.conf"
                -
                  QSS3BucketName: QSS3BucketName
                  QSS3KeyPrefix: QSS3KeyPrefix
          packages:
            apt:
              nginx: []
        configSets:
          webserver_install:
            - config-webserver
            - run_service-webserver
        run_service-webserver:
          commands:
            start_webserver:
              command: "systemctl start nginx"
    Properties:
      ImageId:
        - AWSAMIRegionMap
        - "AWS::Region"
        - US1604HVM
      InstanceType: InstanceType
      KeyName: KeyPairName
      SecurityGroups:
        - WebServerSecurityGroup
      UserData:
        ? "Fn::Sub"
        :
          - |
              #!/bin/bash -x
              #CFN Functions
              function cfn_fail
              {
              cfn-signal -e 1 --stack ${AWS::StackName} --region ${AWS::Region} --resource WebServerGroup
              exit 1
              }
              function cfn_success
              {
              cfn-signal -e 0 --stack ${AWS::StackName} --region ${AWS::Region} --resource WebServerGroup
              exit 0
              }
              S3URI=https://${QSS3BucketName}.${S3Region}.amazonaws.com/${QSS3KeyPrefix}
              echo \'[Cloning: Load QuickStart Common Utils]\'
              #Once Repo is public (Use quickstart-linux-utilities submodue)
              git clone https://github.com/aws-quickstart/quickstart-linux-utilities.git
              source /quickstart-linux-utilities/quickstart-cfn-tools.source
              echo \'[Loaded: Load QuickStart Common Utils]\'
              echo \'[Update Operating System]\'
              qs_update-os || qs_err
              qs_bootstrap_pip || qs_err
              qs_aws-cfn-bootstrap || qs_err
              cfn-init -v --stack ${AWS::StackName} --resource WebServerLaunchConfig --configsets webserver_install --region ${AWS::Region} || cfn_fail
              # Signal cfn-init (final check)
              [ $(qs_status) == 0 ] && cfn_success || cfn_fail
          -
            S3Region:
              - GovCloudCondition
              - s3-us-gov-west-1
              - s3
    Type: "AWS::AutoScaling::LaunchConfiguration"
  WebServerScaleDownPolicy:
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: WebServerGroup
      Cooldown: "60"
      ScalingAdjustment: "-1"
    Type: "AWS::AutoScaling::ScalingPolicy"
  WebServerScaleUpPolicy:
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: WebServerGroup
      Cooldown: "60"
      ScalingAdjustment: "1"
    Type: "AWS::AutoScaling::ScalingPolicy"
  WebServerSecurityGroup:
    Properties:
      GroupDescription: "Enable HTTP from the load balancer only SSH Access from RemoteAccessCIDR"
      SecurityGroupIngress:
        -
          CidrIp: RemoteAccessCIDR
          FromPort: "22"
          IpProtocol: tcp
          ToPort: "22"
        -
          CidrIp: WebserverCIDR
          FromPort: "80"
          IpProtocol: tcp
          ToPort: "80"
      VpcId: VPCID
    Type: "AWS::EC2::SecurityGroup"
